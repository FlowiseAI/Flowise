import { describe, it, expect } from '@jest/globals'
import axios from 'axios'
import { BILLING_TEST_CONFIG, MOCK_STRIPE_CUSTOMER } from './setup'

describe('Billing API', () => {
    describe('Customer Management', () => {
        it('should get customer status', async () => {
            try {
                const response = await axios.get(`${BILLING_TEST_CONFIG.API_URL}/api/v1/billing/customer/status`, {
                    headers: BILLING_TEST_CONFIG.headers
                })
                expect(response.status).toBe(200)
                expect(response.data).toHaveProperty('stripeCustomerId', MOCK_STRIPE_CUSTOMER.id)
                expect(response.data).toHaveProperty('credits')
                expect(response.data).toHaveProperty('tier')
            } catch (error) {
                expect(error).toBeNull()
            }
        })
    })

    describe('Usage Tracking', () => {
        it('should track usage event', async () => {
            try {
                const response = await axios.post(
                    `${BILLING_TEST_CONFIG.API_URL}/api/v1/billing/usage/track`,
                    {
                        type: 'token',
                        amount: 100
                    },
                    { headers: BILLING_TEST_CONFIG.headers }
                )
                expect(response.status).toBe(200)
                expect(response.data).toHaveProperty('remainingCredits')
                expect(response.data.remainingCredits).toBe(BILLING_TEST_CONFIG.freeTierCredits - 100)
            } catch (error) {
                expect(error).toBeNull()
            }
        })

        it('should get usage summary', async () => {
            try {
                const response = await axios.get(`${BILLING_TEST_CONFIG.API_URL}/api/v1/billing/usage/summary`, {
                    headers: BILLING_TEST_CONFIG.headers
                })
                expect(response.status).toBe(200)
                expect(response.data).toHaveProperty('totalUsage')
                expect(response.data).toHaveProperty('periodStart')
                expect(response.data).toHaveProperty('periodEnd')
                expect(response.data.totalUsage).toBe(100) // From previous test
            } catch (error) {
                expect(error).toBeNull()
            }
        })

        it('should enforce usage limits', async () => {
            try {
                // Try to use more than available credits
                const response = await axios.post(
                    `${BILLING_TEST_CONFIG.API_URL}/api/v1/billing/usage/track`,
                    {
                        type: 'token',
                        amount: BILLING_TEST_CONFIG.hardLimitCredits + 1
                    },
                    { headers: BILLING_TEST_CONFIG.headers }
                )
                expect(response).toBeNull() // Should not reach here
            } catch (error: any) {
                expect(error.response.status).toBe(403)
                expect(error.response.data).toHaveProperty('message')
                expect(error.response.data.message).toContain('Usage limit exceeded')
            }
        })
    })

    describe('Subscription Management', () => {
        it('should get subscription status', async () => {
            try {
                const response = await axios.get(`${BILLING_TEST_CONFIG.API_URL}/api/v1/billing/subscription/status`, {
                    headers: BILLING_TEST_CONFIG.headers
                })
                expect(response.status).toBe(200)
                expect(response.data).toHaveProperty('plan')
                expect(response.data).toHaveProperty('status', 'active')
                expect(response.data).toHaveProperty('currentPeriodEnd')
            } catch (error) {
                expect(error).toBeNull()
            }
        })

        it('should get upcoming invoice', async () => {
            try {
                const response = await axios.get(`${BILLING_TEST_CONFIG.API_URL}/api/v1/billing/invoice/upcoming`, {
                    headers: BILLING_TEST_CONFIG.headers
                })
                expect(response.status).toBe(200)
                expect(response.data).toHaveProperty('amount')
                expect(response.data).toHaveProperty('dueDate')
            } catch (error) {
                expect(error).toBeNull()
            }
        })
    })

    describe('Error Handling', () => {
        it('should handle invalid API key', async () => {
            try {
                await axios.get(`${BILLING_TEST_CONFIG.API_URL}/api/v1/billing/customer/status`, {
                    headers: {
                        ...BILLING_TEST_CONFIG.headers,
                        Authorization: 'Bearer invalid-key'
                    }
                })
                expect(true).toBe(false) // Should not reach here
            } catch (error: any) {
                expect(error.response.status).toBe(401)
            }
        })

        it('should handle missing customer ID', async () => {
            try {
                // Temporarily remove customer ID from headers
                const { Authorization, ...headers } = BILLING_TEST_CONFIG.headers
                await axios.get(`${BILLING_TEST_CONFIG.API_URL}/api/v1/billing/customer/status`, {
                    headers
                })
                expect(true).toBe(false) // Should not reach here
            } catch (error: any) {
                expect(error.response.status).toBe(401)
            }
        })
    })
})
