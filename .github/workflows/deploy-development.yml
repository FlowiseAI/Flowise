name: Sumo Chatwoot for Development

on:
  push:
    branches:
      - develop

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Validate Cloudformation
        run: |
          aws cloudformation validate-template \
            --template-body file://aws-cloudformation/ecs.yml

      - name: Network-Cloudformation
        run: |
          STACK_NAME=sumo-flowise-ecs-stack-dev
          aws cloudformation deploy \
            --template-file aws-cloudformation/ecs.yml \
            --parameter-overrides Environment=dev \
            --stack-name $STACK_NAME \
            --capabilities CAPABILITY_NAMED_IAM

          echo "CloudFormation Outputs:"
          aws cloudformation describe-stacks --stack-name $STACK_NAME --query 'Stacks[0].Outputs' --output table

      - name: EC2-Cloudformation
        run: |
          STACK_NAME=sumo-flowise-ec2-stack-dev
          aws cloudformation deploy \
            --template-file aws-cloudformation/ec2.yml \
            --parameter-overrides \
              Environment=dev \
              KeyName=${{ secrets.KEY_NAME }} \
            --stack-name $STACK_NAME \
            --capabilities CAPABILITY_NAMED_IAM

          echo "CloudFormation Outputs:"
          aws cloudformation describe-stacks --stack-name $STACK_NAME --query 'Stacks[0].Outputs' --output table

          SumoFlowisePublicIP=$(aws cloudformation describe-stacks --stack-name $STACK_NAME --query "Stacks[0].Outputs[?OutputKey=='SumoFlowisePublicIP'].OutputValue" --output text)
          echo "EC2_IP=${SumoFlowisePublicIP}" >> $GITHUB_ENV

          SumoFlowiseWebAppURL=$(aws cloudformation describe-stacks --stack-name $STACK_NAME --query "Stacks[0].Outputs[?OutputKey=='SumoFlowiseWebAppURL'].OutputValue" --output text)
          echo "EC2_ID=${SumoFlowiseWebAppURL}" >> $GITHUB_ENV

      - name: Upload Source Code to EC2
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ env.EC2_IP }}
          username: ec2-user
          key: ${{ secrets.SSH_KEY }}
          overwrite: true
          timeout: 150s
          rm: true
          source: './*'
          target: '/home/ec2-user/flowise'

      # - name: Install Flowise in EC2
      #   uses: appleboy/ssh-action@v1.1.0
      #   with:
      #     host: ${{ env.EC2_IP }}
      #     username: ec2-user
      #     key: ${{ secrets.SSH_KEY }}
      #     script: |
      #       # Update packages
      #       yum update -y

      #       # Install Docker
      #       yum install -y docker
      #       systemctl enable docker
      #       systemctl start docker

      #       # Add ec2-user to the Docker group
      #       usermod -aG docker ec2-user

      #       # Install Docker Compose
      #       yum install -y docker-compose-plugin

      #       # Install Git
      #       yum install -y git

      #       # Clone the Flowise repository
      #       # git clone https://github.com/FlowiseAI/Flowise.git /home/ec2-user/flowise
      #       cd /home/ec2-user/flowise

      #       # Create the .env file
      #       cat <<EOT >> /home/ec2-user/flowise/docker/.env
      #       PORT=3000
      #       DATABASE_PATH=/root/.flowise
      #       APIKEY_PATH=/root/.flowise
      #       SECRETKEY_PATH=/root/.flowise
      #       LOG_PATH=/root/.flowise/logs
      #       BLOB_STORAGE_PATH=/root/.flowise/storage
      #       EOT

      #       # Start the Flowise application using Docker Compose
      #       docker compose up -d

