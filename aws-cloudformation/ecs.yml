AWSTemplateFormatVersion: "2010-09-09"
Description: CloudFormation template for setting up Flowise VPC and networking resources

Parameters:
  Stage:
    Description: Prefix of resource names
    Type: String
    Default: sumo-flowise

  Environment:
    Description: "Deployment environment (e.g., dev, prod)"
    Type: String
    Default: dev
    AllowedValues:
      - dev
      - prod

  DesiredCount:
    Description: Number of ECS tasks to run
    Type: Number
    Default: 2

  SumoFlowiseCertificateArn:
    Description: Certificate ARN
    Type: String

Mappings:
  SubnetConfig:
    VPC:
      CIDR: "10.0.0.0/16"
    Public1:
      CIDR: "10.0.0.0/24"
    Public2:
      CIDR: "10.0.1.0/24"
    Private1:
      CIDR: "10.0.2.0/24"
    Private2:
      CIDR: "10.0.3.0/24"      

Resources:
  ####
  # VPC related resources
  ####
  SumoFlowiseVPC:
    Type: AWS::EC2::VPC
    Properties:
      EnableDnsSupport: true
      EnableDnsHostnames: true
      CidrBlock: !FindInMap ["SubnetConfig", "VPC", "CIDR"]
      Tags:
        - Key: Name
          Value: !Join ["-", [!Ref Stage, vpc, !Ref Environment]]
        - Key: Environment
          Value: !Ref Environment

  SumoFlowisePublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select
        - 0
        - Fn::GetAZs: !Ref "AWS::Region"
      VpcId: !Ref SumoFlowiseVPC
      CidrBlock: !FindInMap ["SubnetConfig", "Public1", "CIDR"]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Join ["-", [!Ref Stage, public-subnet1, !Ref Environment]]
        - Key: Environment
          Value: !Ref Environment

  SumoFlowisePublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select
        - 1
        - Fn::GetAZs: !Ref "AWS::Region"
      VpcId: !Ref SumoFlowiseVPC
      CidrBlock: !FindInMap ["SubnetConfig", "Public2", "CIDR"]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Join ["-", [!Ref Stage, public-subnet2, !Ref Environment]]
        - Key: Environment
          Value: !Ref Environment

  SumoFlowisePrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select
        - 0
        - Fn::GetAZs: !Ref "AWS::Region"
      VpcId: !Ref SumoFlowiseVPC
      CidrBlock: !FindInMap ["SubnetConfig", "Private1", "CIDR"]
      Tags:
        - Key: Name
          Value: !Join ["-", [!Ref Stage, private-subnet1, !Ref Environment]]
        - Key: Environment
          Value: !Ref Environment

  SumoFlowisePrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select
        - 1
        - Fn::GetAZs: !Ref "AWS::Region"
      VpcId: !Ref SumoFlowiseVPC
      CidrBlock: !FindInMap ["SubnetConfig", "Private2", "CIDR"]
      Tags:
        - Key: Name
          Value: !Join ["-", [!Ref Stage, private-subnet2, !Ref Environment]]
        - Key: Environment
          Value: !Ref Environment

  SumoFlowiseInternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Join ["-", [!Ref Stage, igw, !Ref Environment]]
        - Key: Environment
          Value: !Ref Environment

  SumoFlowiseGatewayAttachement:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref SumoFlowiseVPC
      InternetGatewayId: !Ref SumoFlowiseInternetGateway

  SumoFlowisePublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref SumoFlowiseVPC
      Tags:
        - Key: Name
          Value: !Join ["-", [!Ref Stage, public-rt, !Ref Environment]]
        - Key: Environment
          Value: !Ref Environment

  SumoFlowisePublicRoute:
    Type: AWS::EC2::Route
    DependsOn: SumoFlowiseGatewayAttachement
    Properties:
      RouteTableId: !Ref SumoFlowisePublicRouteTable
      DestinationCidrBlock: "0.0.0.0/0"
      GatewayId: !Ref SumoFlowiseInternetGateway

  SumoFlowisePublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref SumoFlowisePublicSubnet1
      RouteTableId: !Ref SumoFlowisePublicRouteTable

  SumoFlowisePublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref SumoFlowisePublicSubnet2
      RouteTableId: !Ref SumoFlowisePublicRouteTable

  SumoFlowiseNatGateway1Attachment:
    Type: AWS::EC2::EIP
    DependsOn: SumoFlowiseGatewayAttachement
    Properties:
      Domain: vpc

  SumoFlowiseNatGateway2Attachment:
    Type: AWS::EC2::EIP
    DependsOn: SumoFlowiseGatewayAttachement
    Properties:
      Domain: vpc

  SumoFlowiseNatGateway1:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt SumoFlowiseNatGateway1Attachment.AllocationId
      SubnetId: !Ref SumoFlowisePublicSubnet1
      Tags:
        - Key: Name
          Value: !Join ["-", [!Ref Stage, ngw1, !Ref Environment]]
        - Key: Environment
          Value: !Ref Environment

  SumoFlowiseNatGateway2:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt SumoFlowiseNatGateway2Attachment.AllocationId
      SubnetId: !Ref SumoFlowisePublicSubnet2
      Tags:
        - Key: Name
          Value: !Join ["-", [!Ref Stage, ngw2, !Ref Environment]]
        - Key: Environment
          Value: !Ref Environment

  SumoFlowisePrivateRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref SumoFlowiseVPC
      Tags:
        - Key: Name
          Value: !Join ["-", [!Ref Stage, private-rt1, !Ref Environment]]
        - Key: Environment
          Value: !Ref Environment

  SumoFlowisePrivateRoute1:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref SumoFlowisePrivateRouteTable1
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref SumoFlowiseNatGateway1

  SumoFlowisePrivateRouteTable1Association:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref SumoFlowisePrivateRouteTable1
      SubnetId: !Ref SumoFlowisePrivateSubnet1

  SumoFlowisePrivateRouteTable2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref SumoFlowiseVPC
      Tags:
        - Key: Name
          Value: !Join ["-", [!Ref Stage, private-rt2, !Ref Environment]]
        - Key: Environment
          Value: !Ref Environment

  SumoFlowisePrivateRoute2:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref SumoFlowisePrivateRouteTable2
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref SumoFlowiseNatGateway2

  SumoFlowisePrivateRouteTable2Association:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref SumoFlowisePrivateRouteTable2
      SubnetId: !Ref SumoFlowisePrivateSubnet2

  ####
  # ALB related resources
  ####
  SumoFlowiseLoadBalancerSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Join ["-", [!Ref Stage, lb-sg, !Ref Environment]]
      GroupDescription: Access to the public facing load balancer
      VpcId: !Ref SumoFlowiseVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 3000
          ToPort: 3000
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        # - CidrIp: 0.0.0.0/0
        #   IpProtocol: -1
      Tags:
        - Key: Name
          Value: !Join ["-", [!Ref Stage, lb-sg, !Ref Environment]]
        - Key: Environment
          Value: !Ref Environment

  SumoFlowiseLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Join ["-", [!Ref Stage, lb, !Ref Environment]]
      Scheme: internet-facing
      LoadBalancerAttributes:
        - Key: idle_timeout.timeout_seconds
          Value: "30"
      Subnets:
        - !Ref SumoFlowisePublicSubnet1
        - !Ref SumoFlowisePublicSubnet2
        - !Ref SumoFlowisePrivateSubnet1
        - !Ref SumoFlowisePrivateSubnet2
      SecurityGroups: 
        - !Ref SumoFlowiseLoadBalancerSG
      IpAddressType: ipv4
      Tags:
        - Key: Environment
          Value: !Ref Environment

  # A dummy target group is used to setup the ALB to just drop traffic
  # initially, before any real service target groups have been added.
  SumoFlowiseDummyTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Join ["-", [!Ref Stage, dummy-tg, !Ref Environment]]
      VpcId: !Ref SumoFlowiseVPC
      Protocol: HTTP
      Port: 3000
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckIntervalSeconds: 6
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 2
      TargetType: ip
      Tags:
        - Key: Name
          Value: !Join ["-", [!Ref Stage, dummy-tg, !Ref Environment]]
        - Key: Environment
          Value: !Ref Environment

  # SumoFlowiseLoadBalancerListener:
  #   Type: AWS::ElasticLoadBalancingV2::Listener
  #   Properties:
  #     LoadBalancerArn: !Ref SumoFlowiseLoadBalancer
  #     Port: 80
  #     Protocol: HTTP
  #     DefaultActions:
  #       - Type: "redirect"
  #         RedirectConfig:
  #           Protocol: HTTPS
  #           Port: "443"
  #           StatusCode: HTTP_301

  # Listener for HTTPS
  SumoFlowiseHTTPSListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref SumoFlowiseLoadBalancer
      Protocol: HTTPS
      Port: 443
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref SumoFlowiseDummyTargetGroup
      Certificates:
        - CertificateArn: !Ref SumoFlowiseCertificateArn

  SumoFlowiseLoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    DependsOn:
      - SumoFlowiseLoadBalancer
    Properties:
      DefaultActions:
        - TargetGroupArn: !Ref SumoFlowiseDummyTargetGroup
          Type: "forward"
      LoadBalancerArn: !Ref SumoFlowiseLoadBalancer
      Port: 80
      Protocol: HTTP

  ####
  # ECS cluster related resources
  ####
  SumoFlowiseECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Join ["-", [!Ref Stage, ecs-cluster, !Ref Environment]]
      Tags:
        - Key: Environment
          Value: !Ref Environment

  SumoFlowiseContainerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Join ["-", [!Ref Stage, container-sg, !Ref Environment]]
      GroupDescription: Access to the containers
      VpcId: !Ref SumoFlowiseVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 0
          ToPort: 65535
          SourceSecurityGroupId: !Ref SumoFlowiseLoadBalancerSG
      Tags:
        - Key: Environment
          Value: !Ref Environment

  ####
  # EFS related resources
  ####
  SumoFlowiseEFSFileSystemSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Join ["-", [!Ref Stage, efs-sg, !Ref Environment]]
      GroupDescription: Security group for EFS file system
      VpcId: !Ref SumoFlowiseVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 2049
          ToPort: 2049
          SourceSecurityGroupId: !Ref SumoFlowiseContainerSecurityGroup
      Tags:
        - Key: Environment
          Value: !Ref Environment

  SumoFlowiseEFSFileSystem:
    Type: AWS::EFS::FileSystem
    Properties:
      Encrypted: true
      PerformanceMode: generalPurpose
      ThroughputMode: bursting

  SumoFlowiseEFSMountTarget1:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref SumoFlowiseEFSFileSystem
      SubnetId: !Ref SumoFlowisePrivateSubnet1
      SecurityGroups:
        - !Ref SumoFlowiseEFSFileSystemSecurityGroup

  SumoFlowiseEFSMountTarget2:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref SumoFlowiseEFSFileSystem
      SubnetId: !Ref SumoFlowisePrivateSubnet2
      SecurityGroups:
        - !Ref SumoFlowiseEFSFileSystemSecurityGroup

  ####
  # IAM roles related resources
  ####
  SumoFlowiseAutoScalingRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: "sts:AssumeRole"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceAutoscaleRole"

  SumoFlowiseECSRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: [ecs.amazonaws.com]
            Action: ["sts:AssumeRole"]
      Path: /
      Policies:
        - PolicyName: ecs-service
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - "ec2:AttachNetworkInterface"
                  - "ec2:CreateNetworkInterface"
                  - "ec2:CreateNetworkInterfacePermission"
                  - "ec2:DeleteNetworkInterface"
                  - "ec2:DeleteNetworkInterfacePermission"
                  - "ec2:Describe*"
                  - "ec2:DetachNetworkInterface"

                  - "elasticloadbalancing:DeregisterInstancesFromLoadBalancer"
                  - "elasticloadbalancing:DeregisterTargets"
                  - "elasticloadbalancing:Describe*"
                  - "elasticloadbalancing:RegisterInstancesWithLoadBalancer"
                  - "elasticloadbalancing:RegisterTargets"
                Resource: "*"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy"

  SumoFlowiseECSTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: [ecs-tasks.amazonaws.com]
            Action: ["sts:AssumeRole"]
      Path: /
      Policies:
        - PolicyName: AmazonECSTaskExecutionRolePolicy
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  # Allow the ECS Tasks to download images from ECR
                  - "ecr:GetAuthorizationToken"
                  - "ecr:BatchCheckLayerAvailability"
                  - "ecr:GetDownloadUrlForLayer"
                  - "ecr:BatchGetImage"

                  # Allow the ECS tasks to upload logs to CloudWatch
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource: "*"
              - Effect: Allow
                Action:
                  - elasticfilesystem:ClientMount
                  - elasticfilesystem:ClientWrite
                  - elasticfilesystem:DescribeMountTargets
                  - elasticfilesystem:DescribeFileSystems
                Resource: !GetAtt SumoFlowiseEFSFileSystem.Arn

  ####
  # Flowise ECS service related resources
  ####
  SumoFlowiseService:
    Type: AWS::ECS::Service
    DependsOn:
      - SumoFlowisePrivateRoute1
      - SumoFlowisePrivateRoute2
      - SumoFlowiseListenerRule
    Properties:
      Cluster: !Ref SumoFlowiseECSCluster
      TaskDefinition: !Ref SumoFlowiseTaskDefinition
      LaunchType: FARGATE
      DesiredCount: !Ref DesiredCount
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          Subnets:
            - !Ref SumoFlowisePrivateSubnet1
            - !Ref SumoFlowisePrivateSubnet2
          SecurityGroups:
            - !Ref SumoFlowiseContainerSecurityGroup
      LoadBalancers:
        - ContainerName: !Join ["-", [!Ref Stage, service, !Ref Environment]]
          ContainerPort: 3000
          TargetGroupArn: !Ref SumoFlowiseTargetGroup
      Tags:
        - Key: Environment
          Value: !Ref Environment

  SumoFlowiseTaskDefinition:
    Type: "AWS::ECS::TaskDefinition"
    Properties:
      ExecutionRoleArn: !GetAtt SumoFlowiseECSTaskExecutionRole.Arn
      RequiresCompatibilities:
        - FARGATE
      ContainerDefinitions:
        - Name: !Join ["-", [!Ref Stage, service, !Ref Environment]]
          Image: "flowiseai/flowise:latest"
          Essential: true
          PortMappings:
            - ContainerPort: 3000
              Protocol: tcp
          Environment:
            - Name: Port
              Value: "3000"
            - Name: CORS_ORIGINS
              Value: ""
            - Name: IFRAME_ORIGINS
              Value: ""
            - Name: FLOWISE_USERNAME
              Value: "user"
            - Name: FLOWISE_PASSWORD
              Value: "1234"
            - Name: FLOWISE_FILE_SIZE_LIMIT
              Value: ""
            - Name: DEBUG
              Value: ""
            - Name: DATABASE_PATH
              Value: "/root/.flowise"
            - Name: DATABASE_TYPE
              Value: "postgres"
            - Name: DATABASE_PORT
              Value: "5432"
            - Name: DATABASE_HOST
              Value: "localhost"
            - Name: DATABASE_NAME
              Value: "flowise"
            - Name: DATABASE_USER
              Value: "user"
            - Name: DATABASE_PASSWORD
              Value: "123"
            - Name: PGSSLMODE
              Value: "require"
            - Name: DATABASE_SSL
              Value: ""
            - Name: DATABASE_SSL_KEY_BASE64
              Value: ""
            - Name: APIKEY_PATH
              Value: "/root/.flowise"
            - Name: SECRETKEY_PATH
              Value: "/root/.flowise"
            - Name: FLOWISE_SECRETKEY_OVERWRITE
              Value: ""
            - Name: LOG_LEVEL
              Value: ""
            - Name: LOG_PATH
              Value: "/root/.flowise/logs"
            - Name: BLOB_STORAGE_PATH
              Value: "/root/.flowise/storage"
            - Name: DISABLE_FLOWISE_TELEMETRY
              Value: ""
          EntryPoint:
            - /bin/sh
            - -c
            - "sleep 3; flowise start"
          MountPoints:
            - SourceVolume: efs-volume
              ContainerPath: "/root/.flowise"
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref SumoFlowiseCloudWatchLogsGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: !Ref Stage
      NetworkMode: awsvpc
      Memory: "512"
      Cpu: "256"
      Volumes:
        - Name: efs-volume
          EFSVolumeConfiguration:
            FilesystemId: !Ref SumoFlowiseEFSFileSystem
            RootDirectory: /
            TransitEncryption: ENABLED
      Tags:
        - Key: Environment
          Value: !Ref Environment

  SumoFlowiseCloudWatchLogsGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Ref AWS::StackName
      RetentionInDays: 7

  SumoFlowiseTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      VpcId: !Ref SumoFlowiseVPC
      Port: 80
      Protocol: HTTP
      Matcher:
        HttpCode: 200-299
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      TargetType: ip

  SumoFlowiseListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      ListenerArn: !Ref SumoFlowiseLoadBalancerListener
      Priority: 1
      Conditions:
        - Field: path-pattern
          Values:
            - /*
      Actions:
        - TargetGroupArn: !Ref SumoFlowiseTargetGroup
          Type: forward

  ####
  # ECS Auto Scaling
  ####
  SumoFlowiseScalableTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    DependsOn:
      - SumoFlowiseService # Ensure the ECS Service is created first    
    Properties:
      MaxCapacity: 5 # Maximum number of task instances
      MinCapacity: 1 # Start with one task instance
      ResourceId: !Join ["/", [service, !Ref SumoFlowiseECSCluster, !GetAtt SumoFlowiseService.Name]]
      RoleARN: !GetAtt SumoFlowiseAutoScalingRole.Arn
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs

  SumoFlowiseScalingPolicyCPU:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: !Join ["-", [!Ref Stage, "cpu-scaling-policy", !Ref Environment]]
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref SumoFlowiseScalableTarget
      TargetTrackingScalingPolicyConfiguration:
        TargetValue: 50 # Target CPU utilization percentage
        PredefinedMetricSpecification:
          PredefinedMetricType: ECSServiceAverageCPUUtilization
        ScaleInCooldown: 300
        ScaleOutCooldown: 300

  SumoFlowiseScalingPolicyMemory:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: !Join ["-", [!Ref Stage, "memory-scaling-policy", !Ref Environment]]
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref SumoFlowiseScalableTarget
      TargetTrackingScalingPolicyConfiguration:
        TargetValue: 70 # Target memory utilization percentage
        PredefinedMetricSpecification:
          PredefinedMetricType: ECSServiceAverageMemoryUtilization
        ScaleInCooldown: 300
        ScaleOutCooldown: 300

Outputs:
  ExternalUrl:
    Description: The url of Flowise application
    Value: !Sub http://${SumoFlowiseLoadBalancer.DNSName}

  SumoFlowiseLoadBalancerSGId:
    Description: 'The ID of the load balancer'
    Value: !Ref SumoFlowiseLoadBalancerSG
    Export:
      Name: !Join ["-", [!Ref Stage, LBSGId, !Ref Environment]]

  SumoFlowiseLoadBalancerDNSName:
    Description: 'DNS name of the load balancer'
    Value: !GetAtt SumoFlowiseLoadBalancer.DNSName
    Export:
      Name: !Join ["-", [!Ref Stage, LBDNSName, !Ref Environment]]

  SumoFlowiseLoadBalancerCanonicalHostedZoneId:
    Description: 'CanonicalHostedZoneId of the load balancer'
    Value: !GetAtt SumoFlowiseLoadBalancer.CanonicalHostedZoneID
    Export:
      Name: !Join ["-", [!Ref Stage, LBCanonicalHostedZoneID, !Ref Environment]]
  