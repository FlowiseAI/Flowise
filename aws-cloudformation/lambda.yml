AWSTemplateFormatVersion: "2010-09-09"

Description: This template creates resources for Flowise application

Parameters:
  Stage:
    Description: Prefix of resource names
    Type: String
    Default: sumo-flowise

  CurrentEnv:
    Description: "Deployment environment (e.g., dev, prod)"
    Type: String
    Default: dev
    AllowedValues:
      - dev
      - prod

  SecretArn:
    Description: The Arn of Secret
    Type: String

Resources:
  SumoFlowiseLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: SumoFlowiseLambdaExecutionRole
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: LambdaExecutionRolePolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - secretsmanager:*
                Resource: "*"
              - Effect: Allow
                Action:
                  - logs:*
                Resource: "*"

  SumoFlowiseLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Join ["-", [!Ref Stage, "lambda", !Ref CurrentEnv]]
      Runtime: python3.9
      Handler: index.lambda_handler
      Role: !GetAtt SumoFlowiseLambdaExecutionRole.Arn
      Tags:
        - Key: Name
          Value: !Join ["-", [!Ref Stage, get-lambda, !Ref CurrentEnv]]
        - Key: CurrentEnv
          Value: !Ref CurrentEnv
      Code:
        ZipFile: !Sub |
          import boto3
          import json

          def lambda_handler(event, context):
              secret_arn = "${SecretArn}"
              # print("secret_arn=", secret_arn)
              if not secret_arn:
                  return {
                      'statusCode': 400,
                      'body': json.dumps("Missing 'secret_arn' in the request.")
                  }
              try:
                  secrets_client = boto3.client('secretsmanager')
                  response = secrets_client.get_secret_value(SecretId=secret_arn)
                  secret = json.loads(response['SecretString'])

                  return {
                      'statusCode': 200,
                      'body': json.dumps({
                          'username': secret.get('username'),
                          'password': secret.get('password'),
                      })
                  }
              except Exception as e:
                  return {
                      'statusCode': 500,
                      'body': json.dumps(f"Error retrieving secret: {str(e)}")
                  }                  

  # API Gateway
  SumoFlowiseApiGatewayRestApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Join ["-", [!Ref Stage, secrets-api, !Ref CurrentEnv]]
      Description: API for accessing secrets

  SumoFlowiseApiGatewayResourceSecrets:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt SumoFlowiseApiGatewayRestApi.RootResourceId
      PathPart: secrets
      RestApiId: !Ref SumoFlowiseApiGatewayRestApi

  SumoFlowiseApiGatewayMethodSecretsGet:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: GET
      AuthorizationType: NONE
      RestApiId: !Ref SumoFlowiseApiGatewayRestApi
      ResourceId: !Ref SumoFlowiseApiGatewayResourceSecrets
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub
          - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaArn}/invocations
          - { LambdaArn: !GetAtt SumoFlowiseLambdaFunction.Arn }
      
  SumoFlowiseApiGatewayDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn: SumoFlowiseApiGatewayMethodSecretsGet
    Properties:
      RestApiId: !Ref SumoFlowiseApiGatewayRestApi
      StageName: !Ref CurrentEnv

  # Grant API Gateway permissions to invoke Lambda
  SumoFlowiseLambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt SumoFlowiseLambdaFunction.Arn
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub
        arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${SumoFlowiseApiGatewayRestApi}/*/*/secrets

Outputs:
  SumoFlowiseApiEndpoint:
    Description: API Gateway endpoint URL
    Value: !Sub
      https://${SumoFlowiseApiGatewayRestApi}.execute-api.${AWS::Region}.amazonaws.com/${CurrentEnv}/secrets