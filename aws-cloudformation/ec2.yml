AWSTemplateFormatVersion: "2010-09-09"

Description: This CloudFormation template creates an EC2 instance to deploy Flowise with Docker.

Parameters:
  Stage:
    Description: Prefix of resource names
    Type: String
    Default: sumo-flowise

  Environment:
    Description: "Deployment environment (e.g., dev, prod)"
    Type: String
    Default: dev
    AllowedValues:
      - dev
      - prod

  KeyName:
    Description: Name of the existing EC2 Key Pair to enable SSH access to the instance.
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: Must be the name of an existing key pair.
    Default: sumo-flowise-key

  InstanceType:
    Description: EC2 instance type for the Flowise application.
    Type: String
    Default: t2.micro
    AllowedValues:
      - t2.micro
      - t3.micro
      - t3.small
      - t3.medium
    ConstraintDescription: Must be a valid EC2 instance type.

Mappings:
  RegionMap:
    # Use Amazon Linux 2 AMI IDs based on region
    us-east-1:
      AMI: "ami-01816d07b1128cd2d" # Amazon Linux 2023 AMI for us-east-1
    us-west-2:
      AMI: "ami-0166fe664262f664c" # Amazon Linux 2 AMI (HVN) for us-west-2
    # us-east-1:
    #   AMI: ami-0c02fb55956c7d316 # Amazon Linux 2 AMI for us-east-1
    # us-west-1:
    #   AMI: ami-0bdb828fd58c52235 # Amazon Linux 2 AMI for us-west-1
    # us-west-2:
    #   AMI: ami-07d0cf3af28718ef8 # Amazon Linux 2 AMI for us-west-2
    # eu-west-1:
    #   AMI: ami-047bb4163c506cd98 # Amazon Linux 2 AMI for eu-west-1
    # eu-central-1:
    #   AMI: ami-0a91cd140a1fc148a # Amazon Linux 2 AMI for eu-central-1
    # ap-south-1:
    #   AMI: ami-0912f71e06545ad88 # Amazon Linux 2 AMI for ap-south-1
    # ap-southeast-1:
    #   AMI: ami-0d0678f5a0fefbbb2 # Amazon Linux 2 AMI for ap-southeast-1
    # ap-southeast-2:
    #   AMI: ami-0a9ce9fecc3d1daf8 # Amazon Linux 2 AMI for ap-southeast-2
    # ap-northeast-1:
    #   AMI: ami-06cd52961ce9f0d85 # Amazon Linux 2 AMI for ap-northeast-1
    # ap-northeast-2:
    #   AMI: ami-0a10b2721688ce9d2 # Amazon Linux 2 AMI for ap-northeast-2

Resources:
  SumoFlowiseLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/Flowise/logs-${Environment}"
      RetentionInDays: 7 # Retain logs for 7 days (customize based on needs)
      Tags:
        - Key: Name
          Value: !Join ["-", [!Ref Stage, "logs", !Ref Environment]]
        - Key: Environment
          Value: !Ref Environment

  SumoFlowiseLogsRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: CloudWatchAgentPolicy
          PolicyDocument: 
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "*"
  
  SumoFlowiseInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref SumoFlowiseLogsRole

  #### EC2 Instance ####
  SumoFlowiseInstance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: !Ref InstanceType
      KeyName: !Ref KeyName
      ImageId: !FindInMap [RegionMap, !Ref "AWS::Region", AMI]
      IamInstanceProfile: !Ref SumoFlowiseInstanceProfile
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            VolumeSize: 60
            VolumeType: gp2
      Tags:
        - Key: Name
          Value: !Join ["-", [!Ref Stage, "instance", !Ref Environment]]
        - Key: Environment
          Value: !Ref Environment
      NetworkInterfaces:
        - AssociatePublicIpAddress: false
          DeviceIndex: 0
          SubnetId: !ImportValue 
            Fn::Join: ["-", [!Ref Stage, "Private1Id", !Ref Environment]]
          GroupSet:
            - !ImportValue 
              Fn::Join: ["-", [!Ref Stage, "LoadbalancerSGId", !Ref Environment]]
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          # Update packages
          sudo yum update -y

          # Install Docker
          sudo yum install -y docker
          sudo systemctl enable docker
          sudo systemctl start docker

          # Add ec2-user to the Docker group
          # usermod -aG docker ec2-user

          # Install Docker Compose
          # sudo yum install docker-compose-plugin
          sudo curl -L "https://github.com/docker/compose/releases/download/v2.32.1/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
          docker-compose --version
          sudo ln -s /usr/local/bin/docker-compose /usr/bin/docker-compose

          # Install Git
          # yum install -y git

          # Clone the Flowise repository
          # git clone https://github.com/FlowiseAI/Flowise.git /home/ec2-user/flowise
          cd /home/ec2-user/flowise

          # Create the .env file
          cat <<EOT >> /home/ec2-user/flowise/docker/.env
          PORT=3000
          DATABASE_PATH=/root/.flowise
          APIKEY_PATH=/root/.flowise
          SECRETKEY_PATH=/root/.flowise
          LOG_PATH=/root/.flowise/logs
          BLOB_STORAGE_PATH=/root/.flowise/storage
          EOT

          cd /home/ec2-user/flowise/docker

          # Start the Flowise application using Docker Compose
          docker-compose up -d


Outputs:
  SumoFlowiseInstanceId:
    Description: The ID of the created EC2 instance.
    Value: !Ref SumoFlowiseInstance

  SumoFlowisePublicIP:
    Description: The public IP address of the EC2 instance.
    Value: !GetAtt SumoFlowiseInstance.PublicIp

  SumoFlowiseWebAppURL:
    Description: The URL to access the Flowise application.
    Value: !Sub "http://${SumoFlowiseInstance.PublicIp}:3000"